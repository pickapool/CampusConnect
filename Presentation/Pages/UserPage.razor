@page "/users"

<PageTitle>CamCon | User</PageTitle>

<MudTable Class="standard-table mt-1" Items="UserList" Hover Bordered Striped FixedFooter Dense Filter="new Func<ApplicationUserModel, bool>(FilterFunction)">
    <ColGroup>
        <col style="width: 30%;" />
        <col />
        <col />
        <col style="width: 1%;" />
    </ColGroup>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Organizations/Departments</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudIconButton OnClick="() => OpenDialog(Enums.Action.Create, new())" Icon="@Icons.Material.Filled.Add"></MudIconButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Department</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Id</MudTd>
        <MudTd DataLabel="Sign">@context.Name</MudTd>
        <MudTd DataLabel="Sign">@context.ProfileInformation?.MyOrganization?.OrganizationName</MudTd>
        <MudTd>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.TopRight" Dense>
                <MudMenuItem Icon="@Icons.Material.Filled.Edit" OnClick="() => OpenDialog(Enums.Action.Delete, context)" Label="Edit" />
                <MudMenuItem Icon="@Icons.Material.Filled.Delete" Label="Delete" />
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    private List<ApplicationUserModel> UserList = new();

    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        UserList = await _userService.GetAllUsers();
    }

    private bool FilterFunction(ApplicationUserModel element) => FilterFunction(element, searchString);

    private bool FilterFunction(ApplicationUserModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task OpenDialog(Enums.Action action, ApplicationUserModel org)
    {
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var parameters = new DialogParameters();
        parameters.Add("Action", action);
        parameters.Add("Model", org);

        var dialog = await _dialogService.ShowAsync<CreateOrganizationDialog>(string.Empty, parameters);

        var result = await dialog.Result;

        if (result is not null)
            if (!result.Canceled)
            {
                await OnInitializedAsync();
            }
    }
}
