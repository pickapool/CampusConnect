@using Domain;
@using MudBlazor.Extensions
@using MudBlazor.Extensions.Components

<MudExDialog>
    <TitleContent>
        Request Admin Page
    </TitleContent>
    <DialogContent>
        <MudStack Class="gap-2">
            <MudText Typo="Typo.caption">@Model?.User?.Name is requesting for a page admin of @Model?.OrganizationName</MudText>
           
                @foreach (var image in PageRequest.PageRequestImages ?? [])
                {
                    <MudButton OnClick="() => OpenAsDialog(image)" Variant="Variant.Text" Color="Color.Secondary">@image.Filename</MudButton>
                }
            
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="() => Submit(Enums.PageRequestStatus.Rejected)" Variant="Variant.Text">Reject</MudButton>
        <MudButton Color="Color.Primary" OnClick="() => Submit(Enums.PageRequestStatus.Approved)" Variant="Variant.Filled">Approve</MudButton>
    </DialogActions>
</MudExDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter] public AdminPageRequestModel Model { get; set; } = new();

    [Parameter] public Guid NotificationId { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private AdminPageRequestModel PageRequest = new();
    private bool Isloaded;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        PageRequest = await _pageRequestService.GetById(Model.AdminPageRequestId);

        StateHasChanged();
    }

    private async Task Submit(Enums.PageRequestStatus status)
    {
       
        Model.PageRequestStatus = status;

        await _pageRequestService.UpdatePageRequestAsync(Model, NotificationId);

        SnackBarHelper.ShowSnackbar($"Request has been {status.Humanize()}.", Variant.Filled, _snackBar, Severity.Success);

        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task OpenAsDialog(PageRequestImageModel image)
    {
        using var stream = new MemoryStream(image.Image);

        var parameters = new DialogParameters {
            { nameof(MudExFileDisplay.StreamUrlHandling), StreamUrlHandling.BlobUrl },
            { nameof(MudExFileDisplay.Dense), true }
        };
        await _dialogService.ShowFileDisplayDialogAsync(stream, image.Filename, image.ContentType, HandleContentError, null, parameters);
    }

    private Task<MudExFileDisplayContentErrorResult> HandleContentError(IMudExFileDisplayInfos arg)
    {   
        if (arg.ContentType.Contains("word"))
        {
            return Task.FromResult(MudExFileDisplayContentErrorResult
                .RedirectTo("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTiZiqnBKWS8NHcKbRH04UkYjrCgxUMz6sVNw&usqp=CAU", "image/png")
                .WithMessage("No word plugin found"));
        }
        return Task.FromResult(MudExFileDisplayContentErrorResult.Unhandled);
    }
}