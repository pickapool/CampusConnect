@using Microsoft.AspNetCore.Components.Authorization
@using Presentation.Authentication
@using Presentation.Shared

@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<AuthorizeView>
    <Authorizing>
        <LoaderComponent></LoaderComponent>
    </Authorizing>
    <Authorized>
        <MudLayout>
            <MudAppBar Elevation="1" Dense>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
                <MudText Typo="Typo.h6" Class="mr-4" Style="color:white;">Campus Connect</MudText>
                <MudSpacer />
                <MudMenu ListClass="notify-container">
                    <ActivatorContent>
                        <MudBadge Content="@NotificationList.Where(c => !c.IsRead).ToList().Count.ToString()" Color="Color.Inherit" Overlap="true" Class="mx-6 my-4">
                            <MudIcon Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit"></MudIcon>
                        </MudBadge>
                    </ActivatorContent>
                    <ChildContent>
                  
                            @foreach (var notification in NotificationList)
                            {
                                @if(notification.NotificationType == Enums.NotificationType.PageRequest)
                                {
                                    var model = JsonSerializer.Deserialize<AdminPageRequestModel>(notification.DataJson);
                                    <MudMenuItem>
                                        <ChildContent>
                                            <PageRequestComponent Notify="notification" Model="model" IsNotification></PageRequestComponent>
                                        </ChildContent>
                                    </MudMenuItem>
                                }
                            }
                       
                    </ChildContent>
                </MudMenu>
            </MudAppBar>
            <MudDrawer @bind-Open="@_open" Class="" ClipMode="DrawerClipMode.Docked" Elevation="1" Variant="@DrawerVariant.Responsive">
                <MudNavMenu>
                    <MudNavLink Match="NavLinkMatch.All">Profile</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All">Change Password</MudNavLink>
                    <MudNavLink OnClick="Logout" Match="NavLinkMatch.All">Logout</MudNavLink>
                </MudNavMenu>
            </MudDrawer>
            <MudMainContent>
                <MudContainer>
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>    
    </Authorized>
    <NotAuthorized>
        <PreLoaderComponent>
            <ChildComponent>
                <LoginComponent OnLoginSuccess="LoginCallback"></LoginComponent>
            </ChildComponent>
        </PreLoaderComponent>
    </NotAuthorized>
</AuthorizeView>
@code {
    private bool _open = false;

    private List<NotifyModel> NotificationList = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            await _hubNotificationService.StartAdminNotificationConnection();

            NotificationList = await _notificationService.GetAll();

        }

        _layoutNotifierService.OnAdminNotificationReceived += GetNotification;
    }

    private async Task LoginCallback()
    {
        NotificationList = await _notificationService.GetAll();

    }

    private async Task GetNotification(Guid id)
    {
        var notification = await _notificationService.GetByIdAsync(id);

        if (notification is not null)
        {
            NotificationList.Insert(0, notification);

            StateHasChanged();
        }
    }

    private void ToggleDrawer()
    {
        _open = !_open;
    }

    private async Task Logout()
    {
        await _localStorage.RemoveItemAsync("token");

        ((CustomAuthenticationState)_authenticationStateProvider).NotifyUserLogout();

        await _hubNotificationService.StopConnectionAsyncAdmin();

        _navigationManager.NavigateTo("/", true);
    }
}

<style>
    .notify-container {
        width: 300px;
        max-width: 300px;
        height: 600px;
        overflow-y: auto;
    }
</style>