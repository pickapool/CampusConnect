@using Microsoft.AspNetCore.Components.Authorization
@using Presentation.Authentication
@using Presentation.Shared

@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<AuthorizeView>
    <Authorizing>
        <LoaderComponent></LoaderComponent>
    </Authorizing>
    <Authorized>
        <MudLayout>
            <MudAppBar Elevation="1" Dense>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
                <MudText Typo="Typo.h6" Class="mr-4" Style="color:white;">Campus Connect</MudText>
                <MudSpacer />
                <MudBadge Content="100" Color="Color.Inherit" Overlap="true" Class="mx-6 my-4">
                    <MudIcon Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit"></MudIcon>
                </MudBadge>
            </MudAppBar>
            <MudDrawer @bind-Open="@_open" Class="" ClipMode="DrawerClipMode.Docked" Elevation="1" Variant="@DrawerVariant.Responsive">
                <MudNavMenu>
                    <MudNavLink Match="NavLinkMatch.All">Profile</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All">Change Password</MudNavLink>
                    <MudNavLink OnClick="Logout" Match="NavLinkMatch.All">Logout</MudNavLink>
                </MudNavMenu>
            </MudDrawer>
            <MudMainContent>
                <MudContainer>
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>    
    </Authorized>
    <NotAuthorized>
        <PreLoaderComponent>
            <ChildComponent>
                <LoginComponent></LoginComponent>
            </ChildComponent>
        </PreLoaderComponent>
    </NotAuthorized>
</AuthorizeView>
@code {


    private bool _open = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            await _hubNotificationService.StartAdminNotificationConnection();
        }
        _layoutNotifierService.OnAdminNotificationReceived += GetNotification;
    }

    private async Task GetNotification(Guid id)
    {
        var notification = await _notificationService.GetByIdAsync(id);

        if (notification is not null)
        {
            Console.WriteLine("Notification received in layout: " + notification);
        }
    }

    private void ToggleDrawer()
    {
        _open = !_open;
    }

    private async Task Logout()
    {
        await _localStorage.RemoveItemAsync("token");

        ((CustomAuthenticationState)_authenticationStateProvider).NotifyUserLogout();

        await _hubNotificationService.StopConnectionAsync();

        _navigationManager.NavigateTo("/", true);
    }
}