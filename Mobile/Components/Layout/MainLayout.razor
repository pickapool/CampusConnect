@using System.Text.Json
@using Domain
@using Mobile.Components.Pages.Dialogs

@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar Elevation="1">
                <MudMenu ListClass="notify-container" Size="Size.Small">
                    <ActivatorContent>
                        <MudBadge Content="@NotificationList.Count" Color="Color.Inherit" Overlap="true" Class="mx-6 my-4">
                            <MudIcon Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit"></MudIcon>
                        </MudBadge>
                    </ActivatorContent>
                    <ChildContent>
                            @foreach (var notification in NotificationList)
                            {
                                @if(notification.NotificationType == Enums.NotificationType.PageRequest)
                                {
                                var model = JsonSerializer.Deserialize<AdminPageRequestModel>(notification.DataJson);

                                <MudMenuItem>
                                        <ChildContent>
                                            <PageRequestComponent Notify="notification" Model="model" IsUserNotification></PageRequestComponent>
                                        </ChildContent>
                                    </MudMenuItem>
                                }
                            }
                       
                    </ChildContent>
                </MudMenu>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"></MudIconButton>
            </MudAppBar>
            <MudDrawer @bind-Open="@_open" Breakpoint="Breakpoint.Lg" Elevation="1" Anchor="Anchor.End" Variant="@DrawerVariant.Responsive">
                <MudDrawerHeader>
                    <MudStack Row>
                        <MudAvatar>
                            @if (_appStateService.CurrentUser.ProfileInformation?.Photo is null)
                            {
                                <span>@(string.IsNullOrEmpty(_appStateService.CurrentUser.ProfileInformation?.FullName) ? _appStateService.CurrentUser.Name.GetInitials() : _appStateService.CurrentUser.ProfileInformation?.FullName.GetInitials())</span>
                            } else
                            {
                                <MudImage Src="@_appStateService.CurrentUser.ProfileInformation?.Photo"></MudImage>
                            }
                        </MudAvatar>
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.caption">@(string.IsNullOrEmpty(_appStateService.CurrentUser.ProfileInformation?.FullName) ? _appStateService.CurrentUser.Name : _appStateService.CurrentUser.ProfileInformation?.FullName)</MudText>
                            <small style="color: blue;">@_appStateService.CurrentUser.ProfileInformation?.MyOrganization?.OrganizationName</small>
                        </div>
                    </MudStack>
                </MudDrawerHeader>
                <MudNavMenu>
                    <MudNavLink Match="NavLinkMatch.All" Href="/profile" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Warehouse">Department</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Password">Change Password</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.EditNotifications">Notification Settings</MudNavLink>
                    <MudNavLink OnClick="RequestPage" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.SendTimeExtension">Request Admin Page</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Logout" OnClick="Logout">Logout</MudNavLink>
                </MudNavMenu>
            </MudDrawer>
            <MudMainContent>
                <MudContainer Class="mt-1 pa-0">
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <div class="login">
            @if(!_isRegister)
            {
                <LoginComponent OnRegisterClick="ToggleRegister"></LoginComponent>
            } else
            {
                <RegisterComponent OnBack="ToggleRegister"></RegisterComponent>
            }
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    private bool _isRegister, _open;

    private void ToggleRegister() => _isRegister = !_isRegister;

    private void ToggleDrawer() => _open = !_open;

    List<NotifyModel> NotificationList = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _layoutNotifierService.OnChanged += HandleChange;

        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var token = await _tokenProvider.GetToken();

            await _hubNotificationService.StartAllNotificationConnection();

            await _hubNotificationService.StartUserNotificationConnection(token.AccessToken);

            NotificationList = await _notificationService.GetByRecipientAsync(_appStateService.CurrentUser.Id);
        }

        _layoutNotifierService.OnAllNotificationReceived += GetNotification;

        _layoutNotifierService.OnUserNotificationReceived += GetNotification;

        
    }

    private async Task GetNotification(Guid id)
    {
        var notification = await _notificationService.GetByIdAsync(id);

        if (notification is not null)
        {
            NotificationList.Insert(0, notification);

            HandleChange();
        }
    }

    private async Task Logout()
    {
        await _localStorage.RemoveItemAsync("token");

        ((CustomAuthenticationState)_authenticationStateProvider).NotifyUserLogout();

        await _hubNotificationService.StopConnectionAsyncUser();
        await _hubNotificationService.StopConnectionAsyncAll();

        _navigationManager.NavigateTo("/", true);
    }

    private void HandleChange()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _layoutNotifierService.OnChanged -= HandleChange;
    }

    private async Task RequestPage()
    {
        var dialog = await _dialogService.ShowAsync<RequestDialog>();

        var result = await dialog.Result;

    }
}